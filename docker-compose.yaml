services:
  nginx:
    image: nginx:1.23.3-alpine
    container_name: nginx_notice
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/configs:/etc/nginx/conf.d:ro
      - static_volume:/code/static/:ro
    ports:
      - "80:80"

  jaeger_agent:
    image: jaegertracing/all-in-one:1.41
    container_name: jaeger
    ports:
      - "${JAEGER_PORT}:6831/udp"
      - "${JAEGER_UI_PORT}:16686"

  auth:
    restart: "always"
    build:
      context: service_auth
      dockerfile: ./docker/Dockerfile
      target: development
    container_name: auth
    volumes:
      - ./service_auth/src/:/opt/app/
    ports:
      - "5000:5000"
    env_file:
      - .env
    depends_on:
      - postgres_auth
      - redis_auth

  redis_auth:
    image: redis:7.0.5-alpine
    container_name: redis_auth
    command: redis-server --requirepass ${REDIS_AUTH_PASSWORD} --save 20 1
    volumes:
      - redis_auth_data:/data
    ports:
      - "${REDIS_AUTH_PORT}:6379"

  postgres_auth:
    image: postgres:15.1-alpine
    container_name: postgres_auth
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data/
    ports:
      - "${PG_AUTH_PORT}:5432"
    environment:
      - POSTGRES_USER=${PG_AUTH_USER}
      - POSTGRES_PASSWORD=${PG_AUTH_PASSWORD}
      - POSTGRES_DB=${PG_AUTH_DB_NAME}

  rabbitmq_notice:
    image: rabbitmq:3.11-management
    container_name: rabbitmq_notice
    restart: always
    ports:
      - "${RABBITMQ_NOTICE_PORT}:5672"
      - "${RABBITMQ_NOTICE_UI_PORT}:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_NOTICE_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_NOTICE_PASSWORD}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
    volumes:
      - rabbitmq_notice_data:/var/lib/rabbitmq

  redis_notice:
    image: redis:7.0.5-alpine
    container_name: redis_notice
    command: redis-server --requirepass ${REDIS_NOTICE_PASSWORD} --save 20 1
    volumes:
      - redis_notice_data:/data
    ports:
      - "${REDIS_NOTICE_PORT}:6379"

  email_sender:
    build:
      context: service_notice/email_sender
      dockerfile: ./Dockerfile
    container_name: email_sender
    volumes:
      - ./service_notice/email_sender/src/:/opt/app/
    env_file:
      - .env
    depends_on:
      - rabbitmq_notice

  websocket_sender:
    build:
      context: service_notice/websocket_sender
      dockerfile: ./Dockerfile
    container_name: websocket_sender
    ports:
      - "${WEBSOCKET_SENDER_PORT}:8888"
    volumes:
      - ./service_notice/websocket_sender/src/:/opt/app/
    env_file:
      - .env
    depends_on:
      - rabbitmq_notice

  etl_notice:
    build:
      context: service_notice/etl
      dockerfile: ./docker/Dockerfile
    container_name: etl_notice
    env_file:
      - .env
    depends_on:
      - rabbitmq_notice
      - postgres_notifications
      - redis_notice

  api_notice:
    build:
      context: service_notice/api
      dockerfile: ./Dockerfile
    container_name: api_notice
    ports:
      - "8008:8000"
    env_file:
      - .env
    depends_on:
      - rabbitmq_notice
  
  postgres_notifications:
    image: postgres:15.1-alpine
    container_name: postgres_notifications
    volumes:
      - postgres_notifications_data:/var/lib/postgresql/data/
      - ./config/sql/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5436:5432"
    restart: always
    environment:
      - POSTGRES_USER=${PG_ADMIN_NOTICE_USER}
      - POSTGRES_PASSWORD=${PG_ADMIN_NOTICE_PASSWORD}
      - POSTGRES_DB=${PG_ADMIN_NOTICE_DB_NAME}

  redis_notifications:
    image: redis:7.0.5-alpine
    container_name: redis_notifications
    volumes:
      - redis_notifications_data:/data
    restart: always
    ports:
      - "63791:6379"

  admin_notifications:
    container_name: admin_notifications
    build:
      context: service_notice/admin_notice
      dockerfile: ./Dockerfile
    command: /bin/bash -c "gunicorn --bind 0.0.0.0:8000 config.wsgi:application"
    volumes:
      - static_volume:/code/static/
    restart: always
    env_file:
      - .env
    ports:
      - "${DJANGO_ADMIN_NOTICE_PORT}:8000"
    depends_on:
      - redis_notifications
      - postgres_notifications

  task_worker:
    container_name: task_worker
    build:
      context: service_notice/admin_notice
      dockerfile: ./Dockerfile
    command: ./scripts/run_celery.sh
    volumes:
      - worker_celery_data:/data
    restart: always
    env_file:
      - .env
    depends_on:
      - admin_notifications
      - redis_notifications
      - postgres_notifications

volumes:
  postgres_auth_data:
  redis_auth_data:
  rabbitmq_notice_data:
  redis_notice_data:
  postgres_notifications_data:
  redis_notifications_data:
  worker_celery_data:
  static_volume:
